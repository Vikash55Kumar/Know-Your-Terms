
// import type { BusinessOutput } from '../../types';
// import { ShieldAlert, Lightbulb, CheckCircle2 } from "lucide-react";

// const BusinessSummary: React.FC<{ aiRawOutput: BusinessOutput }> = ({ aiRawOutput }) => {
//   return (
//     <div className="bg-white shadow-sm rounded-2xl p-8 space-y-10">
//       {/* Title */}
//       <h2 className="text-3xl font-bold text-gray-900 border-b pb-4">Business Contract Summary</h2>

//       {/* About */}
//       <p className="text-gray-700 leading-relaxed">{aiRawOutput.about}</p>

//       {/* Clauses */}
//       <div>
//         <h3 className="text-xl font-semibold text-gray-800 mb-4">ðŸ“‘ Clauses</h3>
//         <div className="space-y-6">
//           {aiRawOutput.clauses.map((clause, i) => (
//             <div key={i} className="border-l-4 border-blue-500 pl-4">
//               <h4 className="text-lg font-semibold text-gray-800">{clause.title}</h4>
//               <p className="text-gray-600 mb-3">{clause.explanation}</p>

//               <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
//                 <div className="flex items-start gap-2 bg-red-50 p-4 rounded-lg">
//                   <ShieldAlert className="text-red-600 w-6 h-6 mt-1" />
//                   <p className="text-sm leading-relaxed text-red-700">
//                     <b>Risk:</b> {clause.risk}
//                   </p>
//                 </div>
//                 <div className="flex items-start gap-2 bg-green-50 p-4 rounded-lg">
//                   <Lightbulb className="text-green-600 w-6 h-6 mt-1" />
//                   <p className="text-sm leading-relaxed text-green-700">
//                     <b>Improvement:</b> {clause.improvement}
//                   </p>
//                 </div>
//               </div>

//             </div>
//           ))}
//         </div>
//       </div>

//       {/* Financials */}
//       <div>
//         <h3 className="text-xl font-semibold text-gray-800 mb-4">ðŸ’° Financials</h3>
//         <p className="mb-2"><b>Total Fee:</b> {aiRawOutput.financials.totalFee}</p>

//         <div className="space-y-3 pl-3 border-l-2 border-gray-300">
//           {aiRawOutput.financials.paymentMilestones.map((m, i) => (
//             <div key={i} className="flex items-center gap-3">
//               <CheckCircle2 className="text-blue-600 w-5 h-5" />
//               <span className="text-gray-700">{m}</span>
//             </div>
//           ))}
//         </div>

//         <p className="mt-3"><b>Late Fee:</b> {aiRawOutput.financials.lateFee}</p>
//       </div>

//       {/* Compliance Notes */}
//       <div>
//         <h3 className="text-xl font-semibold text-gray-800 mb-3">ðŸ“Œ Compliance Notes</h3>
//         <div className="flex flex-wrap gap-2">
//           {aiRawOutput.keyComplianceNotes.map((c, i) => (
//             <span 
//               key={i} 
//               className="px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full border"
//             >
//               {c}
//             </span>
//           ))}
//         </div>
//       </div>

//       {/* Final Assessment */}
//       <div className="p-6 rounded-xl bg-gray-50 border">
//         <h3 className="text-lg font-semibold text-gray-800 mb-2">Final Assessment</h3>
//         <p>
//           <span 
//             className={`px-3 py-1 rounded-full text-sm font-medium ${
//               aiRawOutput.finalAssessment.overallRisk === "High"
//                 ? "bg-red-100 text-red-700"
//                 : aiRawOutput.finalAssessment.overallRisk === "Medium"
//                 ? "bg-yellow-100 text-yellow-700"
//                 : "bg-green-100 text-green-700"
//             }`}
//           >
//             {aiRawOutput.finalAssessment.overallRisk}
//           </span>
//         </p>
//         <p className="text-gray-700 mt-2">{aiRawOutput.finalAssessment.comment}</p>
//       </div>

//       {/* Footer Branding (Web) */}
//       <footer className="pt-6 mt-8 border-t border-gray-200 text-center text-xs text-gray-500">
//         Generated by <span className="font-semibold">Know Your Terms</span>
//       </footer>
//     </div>
//   );
// };

// export default BusinessSummary;





import type { BusinessOutput as ImportedBusinessOutput } from '../../types';

// Type guard for new API shape
function isNewAssessment(obj: any): obj is { overallScore: number; recommendations: string[] } {
  return obj && typeof obj.overallScore === 'number' && Array.isArray(obj.recommendations);
}
import { ShieldAlert, Lightbulb, CheckCircle2 } from "lucide-react";

const CircularScore: React.FC<{ score: number }> = ({ score }) => {
  // Score is out of 10, convert to percent
  const percent = Math.round((score / 10) * 100);
  const radius = 40;
  const stroke = 7;
  const normalizedRadius = radius - stroke / 2;
  const circumference = normalizedRadius * 2 * Math.PI;
  const strokeDashoffset = circumference - (percent / 100) * circumference;
  return (
    <svg height={radius * 2} width={radius * 2} className="block mx-auto">
      <circle
        stroke="#e5e7eb"
        fill="none"
        strokeWidth={stroke}
        cx={radius}
        cy={radius}
        r={normalizedRadius}
      />
      <circle
        stroke="#2563eb"
        fill="none"
        strokeWidth={stroke}
        strokeLinecap="round"
        cx={radius}
        cy={radius}
        r={normalizedRadius}
        strokeDasharray={circumference}
        strokeDashoffset={strokeDashoffset}
        style={{ transition: 'stroke-dashoffset 0.5s' }}
      />
      <text
        x="50%"
        y="50%"
        textAnchor="middle"
        dy=".3em"
        fontSize="1.5rem"
        fill="#2563eb"
        fontWeight="bold"
      >
        {score}
      </text>
    </svg>
  );
};

const BusinessSummary: React.FC<{ aiRawOutput: ImportedBusinessOutput }> = ({ aiRawOutput }) => {
  const assessment = aiRawOutput.finalAssessment;
  const isNew = isNewAssessment(assessment);
  // Defensive: get title if present and is a string
  const summaryTitle = typeof (aiRawOutput as any).title === 'string' && (aiRawOutput as any).title
    ? (aiRawOutput as any).title
    : 'Business Contract Summary';
  return (
    <div className="relative">
      {/* Fixed Title */}
      <div className="sticky top-0 z-10 bg-white pb-2 border-b border-gray-200">
        <h2 className="text-3xl font-bold text-gray-900 px-8 pt-6 pb-4 w-full">{summaryTitle}</h2>
      </div>
      <div className="flex flex-col md:flex-row gap-0">
        {/* Left: Scrollable Content */}
        <div className="md:w-3/4 w-full">
          <div className="bg-white rounded-2xl p-8 space-y-10 max-h-[600px] overflow-y-auto">
            {/* About */}
            <div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">About</h3>
              <p className="text-gray-700 leading-relaxed">{aiRawOutput.about}</p>
            </div>

            {/* Clauses */}
            <div>
              <h3 className="text-xl font-semibold text-gray-800 mb-4">ðŸ“‘ Clauses</h3>
              <div className="space-y-6">
                {aiRawOutput.clauses.map((clause, i) => (
                  <div key={i} className="border-l-4 border-blue-500 pl-4">
                    <h4 className="text-lg font-semibold text-gray-800">{clause.title}</h4>
                    <p className="text-gray-600 mb-3">{clause.explanation}</p>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      <div className="flex items-start gap-2 bg-red-50 p-4 rounded-lg">
                        <ShieldAlert className="text-red-600 w-6 h-6 mt-1" />
                        <p className="text-sm leading-relaxed text-red-700">
                          <b>Risk:</b> {clause.risk}
                        </p>
                      </div>
                      <div className="flex items-start gap-2 bg-green-50 p-4 rounded-lg">
                        <Lightbulb className="text-green-600 w-6 h-6 mt-1" />
                        <p className="text-sm leading-relaxed text-green-700">
                          <b>Improvement:</b> {clause.improvement}
                        </p>
                      </div>
                    </div>

                  </div>
                ))}
              </div>
            </div>

            {/* Financials */}
            <div>
              <h3 className="text-xl font-semibold text-gray-800 mb-4">ðŸ’° Financials</h3>
              <p className="mb-2"><b>Total Fee:</b> {aiRawOutput.financials.totalFee}</p>

              <div className="space-y-3 pl-3 border-l-2 border-gray-300">
                {aiRawOutput.financials.paymentMilestones.map((m, i) => (
                  <div key={i} className="flex items-center gap-3">
                    <CheckCircle2 className="text-blue-600 w-5 h-5" />
                    <span className="text-gray-700">{m}</span>
                  </div>
                ))}
              </div>

              <p className="mt-3"><b>Late Fee:</b> {aiRawOutput.financials.lateFee}</p>
            </div>

            {/* Compliance Notes */}
            <div>
              <h3 className="text-xl font-semibold text-gray-800 mb-3">ðŸ“Œ Compliance Notes</h3>
              <div className="flex flex-wrap gap-2">
                {aiRawOutput.keyComplianceNotes.map((c, i) => (
                  <span 
                    key={i} 
                    className="px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full border"
                  >
                    {c}
                  </span>
                ))}
              </div>
            </div>

            {/* Final Assessment */}
            <div className="p-6 rounded-xl bg-gray-50 border">
              <h3 className="text-lg font-semibold text-gray-800 mb-2">Final Assessment</h3>
              <p className="text-gray-700 mt-2">
                {assessment && assessment.comment
                  ? assessment.comment
                  : <span className="text-gray-400">No assessment comment available</span>
                }
              </p>
            </div>
          </div>
        </div>

        {/* Right: Score & Recommendations */}
        <div className="md:w-1/4 w-full flex-shrink-0">
          <div className="bg-white shadow rounded-2xl py-6 px-4 flex flex-col items-center mb-6 sticky top-28" style={{ minHeight: 340 }}>
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Overall Score</h3>
            {isNew ? (
              <CircularScore score={assessment.overallScore} />
            ) : (
              <div className="text-gray-400 text-sm mb-4">No score available</div>
            )}
            <div className="mt-6 w-full">
              <h4 className="text-base font-semibold text-gray-800 mb-2">Recommendations</h4>
              <ul className="list-disc pl-5 text-gray-700 text-sm space-y-1">
                {isNew && assessment.recommendations.length > 0
                  ? assessment.recommendations.map((rec: string, i: number) => (
                      <li key={i}>{rec}</li>
                    ))
                  : <li className="text-gray-400">No recommendations available</li>
                }
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BusinessSummary;

